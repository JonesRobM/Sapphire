"""
Collection of dielectric functions and tools to load tabulated data
"""

from __future__ import print_function
from __future__ import absolute_import

import numpy as np

#==============================================================================
# Internal definitions
#==============================================================================
class _interp1dPicklable:
    """wrapper for pickleable version of `scipy.interpolate.interp1d`
    
    **Note:** there might be still pickle-problems with certain c / fortran 
    wrapped libraries
    
    From: http://stackoverflow.com/quesoons/32883491/pickling-scipy-interp1d-spline
    """
    def __init__(self, xi, yi, **kwargs):
        from scipy.interpolate import interp1d
        self.xi = xi
        self.yi = yi
        self.args = kwargs
        self.f = interp1d(xi, yi, **kwargs)

    def __call__(self, xnew):
        return self.f(xnew)

    def __getstate__(self):
        return self.xi, self.yi, self.args

    def __setstate__(self, state):
        from scipy.interpolate import interp1d
        self.f = interp1d(state[0], state[1], **state[2])


#==============================================================================
# Metals
#==============================================================================
class Ag(object):
    """Silver index
    
    Complex dielectric function of silver from:
        W. S. M. Werner, K. Glantschnig, C. Ambrosch-Draxl. 
        Optical constants and inelastic electron-scattering data for 17 elemental metals,
        J. Phys Chem Ref. Data 38, 1013-1092 (2009)
    
    Parameters
    ----------
    interpolate_order : int, default: 1
        interpolation order for data (1: linear, 2: square, 3: cubic)
        "1" uses `numpy`, "2" and "3" require `scipy` (`scipy.interpolate.interp1d`)
    
    """
    __name__ = 'Silver - DFT'
    
    def __init__(self, interpolate_order=1):
        """silver dispersion"""

        self.wl = 1000*np.array([0.017586, 0.017712, 0.017839, 0.017969, 0.018100,
                                 0.01823, 0.018368, 0.018505, 0.018644, 0.018785,
                                 0.018929, 0.019074, 0.019222, 0.019373, 0.019525,
                                 0.019680, 0.019837, 0.019997, 0.020160, 0.020325,
                                 0.020493, 0.020664, 0.020838, 0.021014, 0.021194,
                                 0.021377, 0.021562, 0.021752, 0.021944, 0.022140,
                                 0.022339, 0.022543, 0.022749, 0.022960, 0.023175,
                                 0.023393, 0.023616, 0.023843, 0.024075, 0.024311,
                                 0.024551, 0.024797, 0.025047, 0.025303, 0.025564, 
                                 0.025830, 0.026102, 0.026380, 0.026663, 0.026953,
                                 0.027249, 0.027552, 0.027862, 0.028178, 0.028502,
                                 0.028834, 0.029173, 0.029520, 0.029876, 0.030240, 
                                 0.030613, 0.030996, 0.031388, 0.031791, 0.032204, 
                                 0.032627, 0.033062, 0.033509, 0.033968, 0.034440, 
                                 0.034925, 0.035424, 0.035937, 0.036466, 0.037010,
                                 0.037571, 0.038149, 0.038745, 0.039360, 0.039995, 
                                 0.040651, 0.041328, 0.042029, 0.042753, 0.043503, 
                                 0.044280, 0.045085, 0.045920, 0.046786, 0.047686, 
                                 0.048621, 0.049594, 0.050606, 0.051660, 0.052759, 
                                 0.053906, 0.055104, 0.056356, 0.057667, 0.059040, 
                                 0.060480, 0.061992, 0.063582, 0.065255, 0.067018, 
                                 0.068880, 0.070848, 0.072932, 0.075142, 0.077490,
                                 0.079990, 0.082656, 0.085506, 0.088560, 0.091840, 
                                 0.095372, 0.099187, 0.103320, 0.107812, 0.112713,
                                 0.118080, 0.123984, 0.130510, 0.137760, 0.145864, 
                                 0.154980, 0.165312, 0.177120, 0.190745, 0.206640, 
                                 0.225426, 0.247968, 0.261019, 0.275520, 0.291728, 
                                 0.309960, 0.330625, 0.354241, 0.381490, 0.413281, 
                                 0.450852, 0.495937, 0.551041, 0.619921, 0.708481,
                                 0.826561, 0.991874, 1.239842, 1.653123, 2.479684,])
        
        self.n_real = np.array([ 0.8413, 0.8364, 0.8335, 0.8331, 0.8340, 0.8426, 
                                0.8472, 0.8493, 0.8474, 0.8444, 0.8382, 0.8339, 
                                0.8294, 0.8277, 0.8306, 0.8423, 0.8574, 0.8634, 
                                0.8446, 0.8345, 0.8272, 0.8294, 0.8469, 0.8565, 
                                0.8240, 0.8059, 0.7925, 0.7783, 0.7662, 0.8537, 
                                0.8803, 0.8606, 0.8683, 0.8825, 0.8666, 0.8558, 
                                0.8459, 0.8359, 0.8266, 0.8282, 0.8372, 0.8315, 
                                0.8347, 0.8062, 0.7920, 0.7644, 0.7546, 0.7367, 
                                0.7415, 0.8203, 0.8063, 0.8334, 0.8696, 0.8347,
                                0.8270, 0.8575, 0.8559, 0.8497, 0.8629, 0.8739, 
                                0.8677, 0.8678, 0.8519, 0.8575, 0.8576, 0.8752, 
                                0.8911, 0.9028, 0.9151, 0.8994, 0.9031, 0.9364, 
                                0.9289, 0.9000, 0.8622, 0.8178, 0.7846, 0.7996, 
                                0.8583, 0.8847, 0.9272, 1.0040, 1.0177, 1.0130, 
                                1.0270, 0.9892, 0.9962, 0.9792, 0.9710, 0.9719,
                                0.9013, 0.8141, 0.7466, 0.7556, 0.7978, 0.8913, 
                                0.9422, 0.9547, 0.9728, 1.0920, 1.3299, 1.3404,
                                1.3141, 1.2119, 1.1491, 1.1230, 1.1138, 1.1193,
                                1.1209, 1.1248, 1.1386, 1.1641, 1.2047, 1.2654, 
                                1.3532, 1.3916, 1.4017, 1.3631, 1.3115, 1.2840, 
                                1.2805, 1.2975, 1.2721, 1.2403, 1.2299, 1.2104,
                                1.1100, 1.0394, 1.0121, 1.0539, 1.1237, 1.2397, 
                                1.3129, 1.3996, 1.4840, 1.5856, 1.6475, 1.4685,
                                1.2298, 0.6230, 0.1930, 0.1394, 0.1338, 0.1466,
                                0.1747, 0.2242, 0.3101, 0.4708, 0.8181, 1.7982, ])
        
        self.n_imag = np.array([0.0535, 0.0592, 0.0684, 0.0780, 0.086, 0.0944, 
                                0.0938, 0.0913, 0.0903, 0.0894, 0.0925, 0.0971, 
                                0.1043, 0.1142, 0.1258, 0.1359, 0.1306, 0.1071, 
                                0.1066, 0.1114, 0.1233, 0.1374, 0.1458, 0.1080,
                                0.1092, 0.1204, 0.1382, 0.1542, 0.2121, 0.2507, 
                                0.1897, 0.1940, 0.1923, 0.1756, 0.1517, 0.1653,
                                0.1566, 0.1633, 0.1712, 0.1841, 0.1840, 0.1798,
                                0.1725, 0.1643, 0.1768, 0.1877, 0.2246, 0.2403, 
                                0.3095, 0.3224, 0.3101, 0.3234, 0.3019, 0.2875, 
                                0.3162, 0.3213, 0.3155, 0.3083, 0.3251, 0.3204, 
                                0.3256, 0.3180, 0.3252, 0.3382, 0.3597, 0.3702,
                                0.3810, 0.3689, 0.3748, 0.3591, 0.3748, 0.3727,
                                0.3316, 0.3194, 0.3184, 0.3418, 0.3983, 0.4852,
                                0.5056, 0.5279, 0.5511, 0.5413, 0.4815, 0.4704,
                                0.4333, 0.4190, 0.4306, 0.4121, 0.4228, 0.3802,
                                0.3639, 0.3869, 0.4882, 0.5982, 0.6975, 0.7371,
                                0.7482, 0.7453, 0.8285, 0.9194, 0.8399, 0.7278, 
                                0.5494, 0.5194, 0.5417, 0.5797, 0.6137, 0.6433,
                                0.6651, 0.6966, 0.7325, 0.7701, 0.8052, 0.8326,
                                0.8162, 0.7592, 0.6838, 0.6481, 0.6489, 0.6795,
                                0.7146, 0.7229, 0.7059, 0.7486, 0.7891, 0.7642,
                                0.8343, 0.9525, 1.1298, 1.2995, 1.4648, 1.6165,
                                1.6771, 1.7233, 1.7264, 1.7280, 1.5557, 1.4048,
                                1.3234, 1.3282, 2.0570, 2.6785, 3.2689, 3.9130,
                                4.6754, 5.6373, 6.9326, 8.8198, 11.8880, 17.8631])
        
        self.n_cplx = self.n_real + 1.0j*self.n_imag
        
        self.interpolate_order = interpolate_order
        if self.interpolate_order > 1:
            self.f = _interp1dPicklable(self.wl, self.n_cplx, kind=self.interpolate_order)
    
    def epsilon(self, wavelength):
        """Silver dielectric function
        
        Parameters
        ----------
        wavelength: real
            wavelength at which to evaluate dielectric function (in nm)
        
        """
        if self.interpolate_order == 1:
            n_r = np.interp(wavelength, self.wl, self.n_real)
            n_i = np.interp(wavelength, self.wl, self.n_imag)
            eps = (n_r + 1j*n_i)**2
        else:
            eps = self.f(wavelength)**2
        return eps

    
class Au(object):
    """gold index
    
    Complex dielectric function of gold from:
        W. S. M. Werner, K. Glantschnig, C. Ambrosch-Draxl. 
        Optical constants and inelastic electron-scattering data for 17 elemental metals,
        J. Phys Chem Ref. Data 38, 1013-1092 (2009)
    
    Parameters
    ----------
    interpolate_order : int, default: 1
        interpolation order for data (1: linear, 2: square, 3: cubic)
        "1" uses `numpy`, "2" and "3" require `scipy` (`scipy.interpolate.interp1d`)
    
    """
    __name__ = 'Gold - DFT'
    
    def __init__(self, interpolate_order=1):
        """gold dispersion"""
        self.wl = 1000*np.array([0.017586, 0.017712, 0.017839, 0.017969, 0.018100,
                                 0.018233, 0.018368, 0.018505, 0.018644, 0.018785,
                                 0.018929, 0.019074, 0.019222, 0.019373, 0.019525, 
                                 0.019680, 0.019837, 0.019997, 0.020160, 0.020325,
                                 0.020493, 0.020664, 0.020838, 0.021014, 0.021194,
                                 0.021377, 0.021562, 0.021752, 0.021944, 0.022140, 
                                 0.022339, 0.022543, 0.022749, 0.022960, 0.023175,
                                 0.023393, 0.023616, 0.023843, 0.024075, 0.024311,
                                 0.024551, 0.024797, 0.025047, 0.025303, 0.025564, 
                                 0.025830, 0.026102, 0.026380, 0.026663, 0.026953,
                                 0.027249, 0.027552, 0.027862, 0.028178, 0.028502,
                                 0.028834, 0.029173, 0.029520, 0.029876, 0.030240,
                                 0.030613, 0.030996, 0.031388, 0.031791, 0.032204, 
                                 0.032627, 0.033062, 0.033509, 0.033968, 0.034440,
                                 0.034925, 0.035424, 0.035937, 0.036466, 0.037010,
                                 0.037571, 0.038149, 0.038745, 0.039360, 0.039995,
                                 0.040651, 0.041328, 0.042029, 0.042753, 0.043503,
                                 0.044280, 0.045085, 0.045920, 0.046786, 0.047686,
                                 0.048621, 0.049594, 0.050606, 0.051660, 0.052759,
                                 0.053906, 0.055104, 0.056356, 0.057667, 0.059040,
                                 0.060480, 0.061992, 0.063582, 0.065255, 0.067018, 
                                 0.068880, 0.070848, 0.072932, 0.075142, 0.077490,
                                 0.079990, 0.082656, 0.085506, 0.088560, 0.091840, 
                                 0.095372, 0.099187, 0.103320, 0.107812, 0.112713,
                                 0.118080, 0.123984, 0.130510, 0.137760, 0.145864,
                                 0.154980, 0.165312, 0.177120, 0.190745, 0.206640,
                                 0.225426, 0.247968, 0.261019, 0.275520, 0.291728,
                                 0.309960, 0.330625, 0.354241, 0.381490, 0.413281,
                                 0.450852, 0.495937, 0.551041, 0.619921, 0.708481,
                                 0.826561, 0.991874, 1.239842, 1.653123, 2.479684,])
        
        self.n_real = np.array([0.8223, 0.8380, 0.8512, 0.8358, 0.8273, 0.8270,
                                0.8323, 0.8463, 0.8390, 0.8337, 0.8312, 0.8262, 
                                0.8237, 0.8126, 0.8033, 0.7967, 0.7965, 0.7909,
                                0.7831, 0.7777, 0.7712, 0.7726, 0.7731, 0.7618,
                                0.7551, 0.7642, 0.7706, 0.7611, 0.7409, 0.7624,
                                0.8418, 0.8148, 0.8094, 0.8166, 0.8410, 0.8730,
                                0.8910, 0.8571, 0.8339, 0.8287, 0.8143, 0.8017,
                                0.7980, 0.7819, 0.7624, 0.7292, 0.7363, 0.7301,
                                0.7327, 0.7172, 0.7071, 0.7212, 0.7309, 0.7544,
                                0.7500, 0.7446, 0.7821, 0.7786, 0.7955, 0.8037,
                                0.8017, 0.7752, 0.7666, 0.7593, 0.7732, 0.7424,
                                0.7501, 0.7789, 0.7940, 0.8078, 0.8149, 0.8165, 
                                0.8056, 0.7908, 0.7727, 0.8140, 0.7744, 0.7479,
                                0.7273, 0.7027, 0.7044, 0.8000, 0.9076, 0.9499,
                                0.9869, 1.0744, 1.1276, 1.0353, 0.9431, 0.9474,
                                0.9145, 0.8859, 0.8899, 0.8432, 0.7630, 0.7955,
                                0.8240, 0.8433, 0.9438, 1.0649, 1.2052, 1.2323,
                                1.4659, 1.4708, 1.4627, 1.4254, 1.3284, 1.2830, 
                                1.2509, 1.2621, 1.2491, 1.2310, 1.2313, 1.2488,
                                1.2847, 1.3709, 1.3386, 1.3484, 1.3586, 1.2695,
                                1.2619, 1.2128, 1.2493, 1.3618, 1.4688, 1.5039,
                                1.7486, 1.7430, 1.9331, 1.7290, 1.6718, 1.6676,
                                1.5997, 1.5792, 1.6115, 1.7126, 1.7826, 1.8444,
                                1.8920, 1.8570, 1.7933, 1.6936, 1.4173, 0.8199,
                                0.4391, 0.3347, 0.3476, 0.4827, 0.8101, 1.7518,])
        
        self.n_imag = np.array([0.0961, 0.1110, 0.0869, 0.0814, 0.0919, 0.0998, 
                                0.1081, 0.1063, 0.0948, 0.0948, 0.0944, 0.0932,
                                0.0917, 0.0911, 0.0965, 0.1036, 0.1111, 0.1119,
                                0.1194, 0.1260, 0.1368, 0.1482, 0.1475, 0.1562,
                                0.1735, 0.1897, 0.1920, 0.1905, 0.2213, 0.2650,
                                0.2619, 0.2277, 0.2409, 0.2584, 0.2652, 0.2491,
                                0.1947, 0.1861, 0.1829, 0.1889, 0.1762, 0.1865,
                                0.1867, 0.1880, 0.1849, 0.2091, 0.2370, 0.2410,
                                0.2586, 0.2691, 0.3033, 0.3258, 0.3366, 0.3592, 
                                0.3486, 0.3760, 0.3894, 0.3757, 0.3884, 0.3795, 
                                0.3474, 0.3631, 0.3790, 0.3931, 0.4048, 0.4088, 
                                0.4719, 0.4750, 0.4842, 0.4717, 0.4859, 0.4611,
                                0.4711, 0.4673, 0.5177, 0.5086, 0.4926, 0.5295, 
                                0.5630, 0.6155, 0.7198, 0.7906, 0.7966, 0.7559,
                                0.7817, 0.7512, 0.6137, 0.5375, 0.5472, 0.6128,
                                0.5927, 0.6236, 0.6473, 0.6481, 0.7281, 0.8378,
                                0.9181, 1.0021, 1.1040, 1.1747, 1.1164, 1.0529,
                                1.1068, 0.9692, 0.8980, 0.6949, 0.7069, 0.7233,
                                0.7654, 0.7975, 0.8014, 0.8327, 0.8759, 0.9217,
                                0.9652, 0.9713, 0.9032, 0.9748, 0.9054, 0.9496, 
                                1.0032, 1.1193, 1.2671, 1.3717, 1.4001, 1.4788,
                                1.4818, 1.4714, 1.3582, 1.2678, 1.4021, 1.4740,
                                1.5521, 1.6873, 1.8399, 1.9514, 2.0094, 2.0676, 
                                2.0938, 2.1072, 2.1932, 2.2562, 2.7124, 3.6965,
                                4.8406, 6.2609, 8.2091, 11.2635, 17.1066,])
        self.n_cplx = self.n_real + 1.0j*self.n_imag
        
        self.interpolate_order = interpolate_order
        if self.interpolate_order > 1:
            self.f = _interp1dPicklable(self.wl, self.n_cplx, kind=self.interpolate_order)
    
    def epsilon(self, wavelength):
        """Gold dielectric function
        
        Parameters
        ----------
        wavelength: real
            wavelength at which to evaluate dielectric function (in nm)
        
        """
        if self.interpolate_order == 1:
            n_r = np.interp(wavelength, self.wl, self.n_real)
            n_i = np.interp(wavelength, self.wl, self.n_imag)
            eps = (n_r + 1j*n_i)**2
        else:
            eps = self.f(wavelength)**2
        return eps

class Cu(object):
    """Copper index
    
    Complex dielectric function of silver from:
    P. B. Johnson and R. W. Christy. Optical Constants of the Noble Metals, 
    Phys. Rev. B 6, 4370-4379 (1972)
    
    Parameters
    ----------
    interpolate_order : int, default: 1
        interpolation order for data (1: linear, 2: square, 3: cubic)
        "1" uses `numpy`, "2" and "3" require `scipy` (`scipy.interpolate.interp1d`)
    
    """
    __name__ = 'Copper, Johnson/Christy'
    
    def __init__(self, interpolate_order=1):
        """Copper dispersion"""
        self.wl = 1000*np.array([0.017586, 0.017712, 0.017839, 0.017969, 0.018100,
                                 0.018233, 0.018368, 0.018505, 0.018644, 0.018785,
                                 0.018929, 0.019074, 0.019222, 0.019373, 0.019525,
                                 0.019680, 0.019837, 0.019997, 0.020160, 0.020325, 
                                 0.020493, 0.020664, 0.020838, 0.021014, 0.021194,
                                 0.021377, 0.021562, 0.021752, 0.021944, 0.022140,
                                 0.022339, 0.022543, 0.022749, 0.022960, 0.023175, 
                                 0.023393, 0.023616, 0.023843, 0.024075, 0.024311,
                                 0.024551, 0.024797, 0.025047, 0.025303, 0.025564,
                                 0.025830, 0.026102, 0.026380, 0.026663, 0.026953,
                                 0.027249, 0.027552, 0.027862, 0.028178, 0.028502, 
                                 0.028834, 0.029173, 0.029520, 0.029876, 0.030240, 
                                 0.030613, 0.030996, 0.031388, 0.031791, 0.032204,
                                 0.032627, 0.033062, 0.033509, 0.033968, 0.034440,
                                 0.034925, 0.035424, 0.035937, 0.036466, 0.037010,
                                 0.037571, 0.038149, 0.038745, 0.039360, 0.039995,
                                 0.040651, 0.041328, 0.042029, 0.042753, 0.043503,
                                 0.044280, 0.045085, 0.045920, 0.046786, 0.047686,
                                 0.048621, 0.049594, 0.050606, 0.051660, 0.052759, 
                                 0.053906, 0.055104, 0.056356, 0.057667, 0.059040,
                                 0.060480, 0.061992, 0.063582, 0.065255, 0.067018,
                                 0.068880, 0.070848, 0.072932, 0.075142, 0.077490,
                                 0.079990, 0.082656, 0.085506, 0.088560, 0.091840,
                                 0.095372, 0.099187, 0.103320, 0.107812, 0.112713,
                                 0.118080, 0.123984, 0.130510, 0.137760, 0.145864,
                                 0.154980, 0.165312, 0.177120, 0.190745, 0.206640, 
                                 0.225426, 0.247968, 0.261019, 0.275520, 0.291728, 
                                 0.309960, 0.330625, 0.354241, 0.381490, 0.413281,
                                 0.450852, 0.495937, 0.551041, 0.619921, 0.708481,
                                 0.826561, 0.991874, 1.239842, 1.653123, 2.479684,])
        
        self.n_real = np.array([0.9564, 0.9926, 0.9639, 0.9502, 0.9437, 0.9393, 
                                0.9341, 0.9306, 0.9317,	0.9276, 0.9271, 0.9254,
                                0.9234, 0.9212, 0.9167, 0.9092, 0.9027, 0.9027, 
                                0.9046, 0.9103, 0.9148, 0.9184, 0.9173, 0.9163,
                                0.9156, 0.9189, 0.9256, 0.9332, 0.9320, 0.9210,
                                0.9118, 0.9073, 0.9085, 0.9092, 0.9085, 0.9064, 
                                0.8994, 0.8999, 0.8995, 0.9015, 0.8984, 0.9006, 
                                0.8975, 0.8970, 0.8950, 0.8982, 0.9011, 0.9021,
                                0.9098, 0.9164, 0.9151, 0.9178, 0.9188, 0.9140,
                                0.9117, 0.9090, 0.9071, 0.9062, 0.9012, 0.8973,
                                0.8964, 0.8976, 0.8982, 0.8952, 0.8903, 0.8845, 
                                0.8810, 0.8783, 0.8780, 0.8733, 0.8686, 0.8677,
                                0.8677, 0.8734, 0.8698, 0.8710, 0.8649, 0.8470, 
                                0.8330, 0.8306, 0.8342, 0.8417, 0.8501, 0.8118,
                                0.7535, 0.7071, 0.7047, 0.7205, 0.7294, 0.7550,
                                0.7987, 0.8657, 0.9202, 0.9686, 1.0215, 0.9928,
                                0.9530, 0.9181, 0.8862, 0.8542, 0.8245, 0.7988,
                                0.7818, 0.7763, 0.7827, 0.8014, 0.8254, 0.8397,
                                0.8606, 0.8895, 0.9285, 0.9826, 1.0420, 1.0441,
                                1.0545, 1.0686, 1.0885, 1.0848, 1.0354, 1.0230,
                                1.0061, 0.9482, 0.9587, 1.0052, 1.0168, 1.0405,
                                1.0915, 1.1460, 1.1124, 1.1340, 1.2621, 1.6165,
                                1.7760, 1.6302, 1.5595, 1.5304, 1.4122, 1.3896,
                                1.4050, 1.4249, 1.3862, 1.3241, 1.2843, 1.2028,
                                0.8602, 0.3770, 0.3587, 0.4912, 0.8212, 1.7760,])
                                
        self.n_imag = np.array([0.1291, 0.0962, 0.0716, 0.0700, 0.0747, 0.0724, 
                                0.0739, 0.0774, 0.0783, 0.0798, 0.0804, 0.0800, 
                                0.0818, 0.0809, 0.0802, 0.0819, 0.0892, 0.0991, 
                                0.1067, 0.1121, 0.1137, 0.1116, 0.1112, 0.1124, 
                                0.1158, 0.1202, 0.1215, 0.1179, 0.1030, 0.1015,
                                0.1020, 0.1108, 0.1156, 0.1171, 0.1200, 0.1164,
                                0.1223, 0.1295, 0.1306, 0.1331, 0.1386, 0.1382,
                                0.1432, 0.1472, 0.1519, 0.1603, 0.1615, 0.1668, 
                                0.1726, 0.1669, 0.1656, 0.1656, 0.1616, 0.1592, 
                                0.1618, 0.1623, 0.1637, 0.1650, 0.1648, 0.1705,
                                0.1746, 0.1782, 0.1781, 0.1771, 0.1780, 0.1826,
                                0.1873, 0.1935, 0.1970, 0.1992, 0.2061, 0.2144, 
                                0.2213, 0.2255, 0.2225, 0.2227, 0.2191, 0.2202,
                                0.2323, 0.2528, 0.2625, 0.2709, 0.2423, 0.2260,
                                0.2382, 0.2899, 0.3654, 0.4039, 0.4517, 0.4980,
                                0.5440, 0.5660, 0.5493, 0.5369, 0.4811, 0.4094, 
                                0.3888, 0.3845, 0.3904, 0.4045, 0.4287, 0.4638,
                                0.5072, 0.5565, 0.6063, 0.6514, 0.6857, 0.7170,
                                0.7547, 0.7926, 0.8271, 0.8518, 0.8311, 0.8174,
                                0.8241, 0.8300, 0.8287, 0.8029, 0.8204, 0.8588,
                                0.8861, 0.9534, 1.0593, 1.1460, 1.1679, 1.2902,
                                1.3687, 1.4210, 1.5035, 1.6870, 1.9222, 2.0372, 
                                1.8818, 1.7273, 1.8202, 1.8469, 1.9484, 2.1308, 
                                2.2933, 2.4387, 2.5808, 2.8166, 3.1036, 3.3892, 
                                3.7838, 4.8766, 6.3943, 8.3756, 11.4688, 17.3882, ])
        
        self.n_cplx = self.n_real + 1.0j*self.n_imag
        
        self.interpolate_order = interpolate_order
        if self.interpolate_order > 1:
            self.f = _interp1dPicklable(self.wl, self.n_cplx, kind=self.interpolate_order)
    
    def epsilon(self, wavelength):
        """Copper dielectric function
        
        Parameters
        ----------
        wavelength: real
            wavelength at which to evaluate dielectric function (in nm)
        
        """
        if self.interpolate_order == 1:
            n_r = np.interp(wavelength, self.wl, self.n_real)
            n_i = np.interp(wavelength, self.wl, self.n_imag)
            eps = (n_r + 1j*n_i)**2
        else:
            eps = self.f(wavelength)**2
        return eps

class Ni(object):
    """Nickel index
    
    Complex dielectric function of silver from:
    P. B. Johnson and R. W. Christy. Optical constants of transition metals: 
        Ti, V, Cr, Mn, Fe, Co, Ni, and Pd, 
    Phys Rev. B 9, 5056-5070 (1974)
    
    Parameters
    ----------
    interpolate_order : int, default: 1
        interpolation order for data (1: linear, 2: square, 3: cubic)
        "1" uses `numpy`, "2" and "3" require `scipy` (`scipy.interpolate.interp1d`)
    
    """
    __name__ = 'Nickel, Johnson/Christy'
    
    def __init__(self, interpolate_order=1):
        """Nickel dispersion"""
        self.wl = 1000*np.array([0.017586	0.8840
0.017712	0.9017
0.017839	0.9139
0.017969	0.8945
0.018100	0.8809
0.018233	0.8702
0.018368	0.8619
0.018505	0.8532
0.018644	0.8444
0.018785	0.8365
0.018929	0.8296
0.019074	0.8299
0.019222	0.8398
0.019373	0.8127
0.019525	0.9924
0.019680	1.2183
0.019837	1.0754
0.019997	1.0261
0.020160	1.0022
0.020325	0.9897
0.020493	0.9830
0.020664	0.9786
0.020838	0.9693
0.021014	0.9571
0.021194	0.9464
0.021377	0.9404
0.021562	0.9365
0.021752	0.9341
0.021944	0.9322
0.022140	0.9309
0.022339	0.9259
0.022543	0.9207
0.022749	0.9166
0.022960	0.9131
0.023175	0.9114
0.023393	0.9115
0.023616	0.9102
0.023843	0.9018
0.024075	0.8941
0.024311	0.8911
0.024551	0.8913
0.024797	0.8919
0.025047	0.8929
0.025303	0.8942
0.025564	0.8953
0.025830	0.8920
0.026102	0.8904
0.026380	0.8871
0.026663	0.8846
0.026953	0.8819
0.027249	0.8771
0.027552	0.8730
0.027862	0.8711
0.028178	0.8699
0.028502	0.8657
0.028834	0.8609
0.029173	0.8562
0.029520	0.8515
0.029876	0.8476
0.030240	0.8411
0.030613	0.8339
0.030996	0.8284
0.031388	0.8242
0.031791	0.8211
0.032204	0.8173
0.032627	0.8146
0.033062	0.8130
0.033509	0.8129
0.033968	0.8153
0.034440	0.8199
0.034925	0.8223
0.035424	0.8201
0.035937	0.8239
0.036466	0.8192
0.037010	0.8051
0.037571	0.7926
0.038149	0.7893
0.038745	0.7948
0.039360	0.8020
0.039995	0.8077
0.040651	0.7918
0.041328	0.7543
0.042029	0.7081
0.042753	0.6686
0.043503	0.6674
0.044280	0.6765
0.045085	0.6897
0.045920	0.7191
0.046786	0.7654
0.047686	0.8134
0.048621	0.8692
0.049594	0.9153
0.050606	0.9513
0.051660	0.9554
0.052759	0.9586
0.053906	0.9459
0.055104	0.9242
0.056356	0.9004
0.057667	0.8749
0.059040	0.8532
0.060480	0.8378
0.061992	0.8321
0.063582	0.8399
0.065255	0.8583
0.067018	0.8737
0.068880	0.8870
0.070848	0.9011
0.072932	0.9213
0.075142	0.9504
0.077490	0.9891
0.079990	1.0421
0.082656	1.0925
0.085506	1.1111
0.088560	1.1403
0.091840	1.1283
0.095372	1.0765
0.099187	1.0645
0.103320	1.0635
0.107812	1.0320
0.112713	0.9803
0.118080	0.9956
0.123984	1.0870
0.130510	1.0458
0.137760	1.0736
0.145864	1.1251
0.154980	1.1499
0.165312	1.1273
0.177120	1.0002
0.190745	0.9778
0.206640	1.1887
0.225426	1.8849
0.247968	1.9972
0.261019	1.5795
0.275520	1.2474
0.291728	1.1685
0.309960	1.1632
0.330625	1.2019
0.354241	1.2801
0.381490	1.3985
0.413281	1.5675
0.450852	1.6111
0.495937	1.6956
0.551041	1.8920
0.619921	2.3897
0.708481	2.5260
0.826561	2.6303
0.991874	2.7829
1.239842	3.1325
1.653123	3.1188
2.479684	3.0684
                                ])
        
        self.n_real = np.array([0.017586	0.8840
0.017712	0.9017
0.017839	0.9139
0.017969	0.8945
0.018100	0.8809
0.018233	0.8702
0.018368	0.8619
0.018505	0.8532
0.018644	0.8444
0.018785	0.8365
0.018929	0.8296
0.019074	0.8299
0.019222	0.8398
0.019373	0.8127
0.019525	0.9924
0.019680	1.2183
0.019837	1.0754
0.019997	1.0261
0.020160	1.0022
0.020325	0.9897
0.020493	0.9830
0.020664	0.9786
0.020838	0.9693
0.021014	0.9571
0.021194	0.9464
0.021377	0.9404
0.021562	0.9365
0.021752	0.9341
0.021944	0.9322
0.022140	0.9309
0.022339	0.9259
0.022543	0.9207
0.022749	0.9166
0.022960	0.9131
0.023175	0.9114
0.023393	0.9115
0.023616	0.9102
0.023843	0.9018
0.024075	0.8941
0.024311	0.8911
0.024551	0.8913
0.024797	0.8919
0.025047	0.8929
0.025303	0.8942
0.025564	0.8953
0.025830	0.8920
0.026102	0.8904
0.026380	0.8871
0.026663	0.8846
0.026953	0.8819
0.027249	0.8771
0.027552	0.8730
0.027862	0.8711
0.028178	0.8699
0.028502	0.8657
0.028834	0.8609
0.029173	0.8562
0.029520	0.8515
0.029876	0.8476
0.030240	0.8411
0.030613	0.8339
0.030996	0.8284
0.031388	0.8242
0.031791	0.8211
0.032204	0.8173
0.032627	0.8146
0.033062	0.8130
0.033509	0.8129
0.033968	0.8153
0.034440	0.8199
0.034925	0.8223
0.035424	0.8201
0.035937	0.8239
0.036466	0.8192
0.037010	0.8051
0.037571	0.7926
0.038149	0.7893
0.038745	0.7948
0.039360	0.8020
0.039995	0.8077
0.040651	0.7918
0.041328	0.7543
0.042029	0.7081
0.042753	0.6686
0.043503	0.6674
0.044280	0.6765
0.045085	0.6897
0.045920	0.7191
0.046786	0.7654
0.047686	0.8134
0.048621	0.8692
0.049594	0.9153
0.050606	0.9513
0.051660	0.9554
0.052759	0.9586
0.053906	0.9459
0.055104	0.9242
0.056356	0.9004
0.057667	0.8749
0.059040	0.8532
0.060480	0.8378
0.061992	0.8321
0.063582	0.8399
0.065255	0.8583
0.067018	0.8737
0.068880	0.8870
0.070848	0.9011
0.072932	0.9213
0.075142	0.9504
0.077490	0.9891
0.079990	1.0421
0.082656	1.0925
0.085506	1.1111
0.088560	1.1403
0.091840	1.1283
0.095372	1.0765
0.099187	1.0645
0.103320	1.0635
0.107812	1.0320
0.112713	0.9803
0.118080	0.9956
0.123984	1.0870
0.130510	1.0458
0.137760	1.0736
0.145864	1.1251
0.154980	1.1499
0.165312	1.1273
0.177120	1.0002
0.190745	0.9778
0.206640	1.1887
0.225426	1.8849
0.247968	1.9972
0.261019	1.5795
0.275520	1.2474
0.291728	1.1685
0.309960	1.1632
0.330625	1.2019
0.354241	1.2801
0.381490	1.3985
0.413281	1.5675
0.450852	1.6111
0.495937	1.6956
0.551041	1.8920
0.619921	2.3897
0.708481	2.5260
0.826561	2.6303
0.991874	2.7829
1.239842	3.1325
1.653123	3.1188
2.479684	3.0684
            ])
        
        self.n_imag = np.array([0.017586	0.1160
0.017712	0.1225
0.017839	0.1012
0.017969	0.0850
0.018100	0.0891
0.018233	0.0960
0.018368	0.1044
0.018505	0.1137
0.018644	0.1267
0.018785	0.1441
0.018929	0.1681
0.019074	0.1994
0.019222	0.2352
0.019373	0.2541
0.019525	0.6338
0.019680	0.1354
0.019837	0.0916
0.019997	0.0887
0.020160	0.0913
0.020325	0.0925
0.020493	0.0916
0.020664	0.0879
0.020838	0.0805
0.021014	0.0778
0.021194	0.0819
0.021377	0.0856
0.021562	0.0892
0.021752	0.0926
0.021944	0.0944
0.022140	0.0924
0.022339	0.0913
0.022543	0.0934
0.022749	0.0960
0.022960	0.0986
0.023175	0.1031
0.023393	0.1042
0.023616	0.1022
0.023843	0.1009
0.024075	0.1068
0.024311	0.1139
0.024551	0.1200
0.024797	0.1245
0.025047	0.1277
0.025303	0.1292
0.025564	0.1290
0.025830	0.1289
0.026102	0.1297
0.026380	0.1302
0.026663	0.1323
0.026953	0.1332
0.027249	0.1351
0.027552	0.1386
0.027862	0.1441
0.028178	0.1437
0.028502	0.1461
0.028834	0.1487
0.029173	0.1518
0.029520	0.1550
0.029876	0.1593
0.030240	0.1629
0.030613	0.1685
0.030996	0.1768
0.031388	0.1850
0.031791	0.1930
0.032204	0.2025
0.032627	0.2111
0.033062	0.2214
0.033509	0.2319
0.033968	0.2422
0.034440	0.2476
0.034925	0.2493
0.035424	0.2561
0.035937	0.2567
0.036466	0.2533
0.037010	0.2571
0.037571	0.2687
0.038149	0.2882
0.038745	0.2995
0.039360	0.3117
0.039995	0.2972
0.040651	0.2810
0.041328	0.2738
0.042029	0.3008
0.042753	0.3522
0.043503	0.4128
0.044280	0.4612
0.045085	0.5154
0.045920	0.5632
0.046786	0.6023
0.047686	0.6233
0.048621	0.6281
0.049594	0.6146
0.050606	0.5839
0.051660	0.5485
0.052759	0.5357
0.053906	0.5106
0.055104	0.5021
0.056356	0.5037
0.057667	0.5172
0.059040	0.5421
0.060480	0.5753
0.061992	0.6159
0.063582	0.6584
0.065255	0.6926
0.067018	0.7193
0.068880	0.7435
0.070848	0.7752
0.072932	0.8092
0.075142	0.8428
0.077490	0.8731
0.079990	0.8933
0.082656	0.8732
0.085506	0.8622
0.088560	0.8445
0.091840	0.7875
0.095372	0.8086
0.099187	0.8469
0.103320	0.8684
0.107812	0.8798
0.112713	0.9466
0.118080	1.0682
0.123984	1.1035
0.130510	1.1255
0.137760	1.2262
0.145864	1.2719
0.154980	1.3188
0.165312	1.3107
0.177120	1.4627
0.190745	1.7488
0.206640	2.1485
0.225426	2.1630
0.247968	1.5830
0.261019	1.3732
0.275520	1.6426
0.291728	1.9286
0.309960	2.1879
0.330625	2.4408
0.354241	2.6920
0.381490	2.9424
0.413281	3.1356
0.450852	3.3295
0.495937	3.6809
0.551041	4.1311
0.619921	4.4457
0.708481	4.6066
0.826561	5.0874
0.991874	5.8264
1.239842	6.9165
1.653123	8.4249
2.479684	12.9552
            ])
        
        self.n_cplx = self.n_real + 1.0j*self.n_imag
        
        self.interpolate_order = interpolate_order
        if self.interpolate_order > 1:
            self.f = _interp1dPicklable(self.wl, self.n_cplx, kind=self.interpolate_order)
    
    def epsilon(self, wavelength):
        """Nickel dielectric function
        
        Parameters
        ----------
        wavelength: real
            wavelength at which to evaluate dielectric function (in nm)
        
        """
        if self.interpolate_order == 1:
            n_r = np.interp(wavelength, self.wl, self.n_real)
            n_i = np.interp(wavelength, self.wl, self.n_imag)
            eps = (n_r + 1j*n_i)**2
        else:
            eps = self.f(wavelength)**2
        return eps

class Pd(object):
    """
    P. B. Johnson and R. W. Christy. 
    Optical constants of transition metals: 
    Ti, V, Cr, Mn, Fe, Co, Ni, and Pd 
    Phys. Rev. B 9, 5056-5070 (1974)
    """
    __name__ = 'Palladium, Johnson/Christie'

    def __init__(self, interpolate_order=1):
        """Palladium dispersion"""
        self.wl = 1000*np.array([
                                0.188, 0.192, 0.195, 0.199, 0.203, 0.207, 0.212, 0.216, 0.221, 0.226, 0.231, 
                                0.237, 0.243, 0.249, 0.255, 0.262, 0.269, 0.276, 0.284, 0.292, 0.301, 0.311,
                                0.320, 0.332, 0.342, 0.354, 0.368, 0.381, 0.397, 0.413, 0.431, 0.451, 0.471, 
                                0.496, 0.521, 0.549, 0.582, 0.617, 0.659, 0.704, 0.756, 0.821, 0.892, 0.984,
                                1.088, 1.216, 1.393, 1.610, 1.937, ])
    
        self.n_real = np.array([
                                0.84, 0.85, 0.85, 0.85, 0.86, 0.87, 0.89, 0.91, 0.92, 0.94, 0.97, 1.00, 1.04, 
                                1.08, 1.11, 1.13, 1.16, 1.19, 1.18, 1.18, 1.20, 1.21, 1.21, 1.20, 1.22, 1.23,
                                1.24, 1.26, 1.30, 1.33, 1.37, 1.41, 1.46, 1.52, 1.57, 1.64, 1.68, 1.75, 1.80,
                                1.86, 1.95, 2.06, 2.23, 2.34, 2.52, 2.66, 2.80, 3.01, 3.34, ])



        self.n_imag = np.array([
                                1.38, 1.42, 1.46, 1.50, 1.55, 1.60, 1.65, 1.70, 1.76, 1.81, 1.86, 1.91, 1.95,
                                1.99, 2.03, 2.07, 2.10, 2.13, 2.18, 2.23, 2.29, 2.35, 2.42, 2.50, 2.57, 2.65,
                                2.74, 2.83, 2.93, 3.03, 3.14, 3.26, 3.39, 3.54, 3.68, 3.84, 4.02, 4.21, 4.42,
                                4.65, 4.89, 5.19, 5.50, 5.89, 6.33, 6.90, 7.65, 8.59, 9.89, ])

        self.n_cplx = self.n_real + 1.0j*self.n_imag

        self.interpolate_order = interpolate_order
        if self.interpolate_order > 1:
            self.f = _interp1dPicklable(self.wl, self.n_cplx, kind=self.interpolate_order)


    def epsilon(self, wavelength):
        """Palladium dielectric function
        
        Parameters
        ----------
        wavelength: real
            wavelength at which to evaluate dielectric function (in nm)
        
        """
        if self.interpolate_order == 1:
            n_r = np.interp(wavelength, self.wl, self.n_real)
            n_i = np.interp(wavelength, self.wl, self.n_imag)
            eps = (n_r + 1j*n_i)**2
        else:
            eps = self.f(wavelength)**2
        return eps




class Pt(object):
    """
    W. S. M. Werner, K. Glantschnig, C. Ambrosch-Draxl. 
    Optical constants and inelastic electron-scattering data for 17 elemental metals 
    J. Phys Chem Ref. Data 38, 1013-1092 (2009)
    """
    __name__ = 'Platinum, Werner'

    def __init__(self, interpolate_order=1):
        """platinum dispersion"""
        self.wl = 1000*np.array([0.017586, 0.017712, 0.017839, 0.017969, 0.0181  , 0.018233,
                            0.018368, 0.018505, 0.018644, 0.018785, 0.018929, 0.019074,
                            0.019222, 0.019373, 0.019525, 0.01968 , 0.019837, 0.019997,
                            0.02016 , 0.020325, 0.020493, 0.020664, 0.020838, 0.021014,
                            0.021194, 0.021377, 0.021562, 0.021752, 0.021944, 0.02214 ,
                            0.022339, 0.022543, 0.022749, 0.02296 , 0.023175, 0.023393,
                            0.023616, 0.023843, 0.024075, 0.024311, 0.024551, 0.024797,
                            0.025047, 0.025303, 0.025564, 0.02583 , 0.026102, 0.02638 ,
                            0.026663, 0.026953, 0.027249, 0.027552, 0.027862, 0.028178,
                            0.028502, 0.028834, 0.029173, 0.02952 , 0.029876, 0.03024 ,
                            0.030613, 0.030996, 0.031388, 0.031791, 0.032204, 0.032627,
                            0.033062, 0.033509, 0.033968, 0.03444 , 0.034925, 0.035424,
                            0.035937, 0.036466, 0.03701 , 0.037571, 0.038149, 0.038745,
                            0.03936 , 0.039995, 0.040651, 0.041328, 0.042029, 0.042753,
                            0.043503, 0.04428 , 0.045085, 0.04592 , 0.046786, 0.047686,
                            0.048621, 0.049594, 0.050606, 0.05166 , 0.052759, 0.053906,
                            0.055104, 0.056356, 0.057667, 0.05904 , 0.06048 , 0.061992,
                            0.063582, 0.065255, 0.067018, 0.06888 , 0.070848, 0.072932,
                            0.075142, 0.07749 , 0.07999 , 0.082656, 0.085506, 0.08856 ,
                            0.09184 , 0.095372, 0.099187, 0.10332 , 0.107812, 0.112713,
                            0.11808 , 0.123984, 0.13051 , 0.13776 , 0.145864, 0.15498 ,
                            0.165312, 0.17712 , 0.190745, 0.20664 , 0.225426, 0.247968,
                            0.261019, 0.27552 , 0.291728, 0.30996 , 0.330625, 0.354241,
                            0.38149 , 0.413281, 0.450852, 0.495937, 0.551041, 0.619921,
                            0.708481, 0.826561, 0.991874, 1.239842, 1.653123, 2.479684])
    
        self.n_real = np.array([0.8718, 0.8709, 0.8699, 0.8695, 0.8685, 0.8675, 0.8661, 0.8651,
                            0.8636, 0.8621, 0.8606, 0.8591, 0.857 , 0.855 , 0.8523, 0.8503,
                            0.8473, 0.8441, 0.8411, 0.8376, 0.8341, 0.8302, 0.8258, 0.8215,
                            0.8171, 0.8128, 0.8091, 0.8061, 0.8049, 0.8071, 0.813 , 0.8241,
                            0.8408, 0.8623, 0.8844, 0.9034, 0.915 , 0.9182, 0.9124, 0.8974,
                            0.8681, 0.8233, 1.0933, 1.0283, 0.9782, 0.9517, 0.9333, 0.9187,
                            0.9068, 0.896 , 0.8858, 0.8762, 0.8677, 0.8588, 0.8504, 0.8427,
                            0.8346, 0.8272, 0.82  , 0.8136, 0.8086, 0.8044, 0.8006, 0.7979,
                            0.7954, 0.7913, 0.7858, 0.7787, 0.7698, 0.7603, 0.7504, 0.7393,
                            0.7283, 0.7174, 0.7068, 0.6958, 0.6853, 0.6766, 0.6689, 0.6642,
                            0.664 , 0.6706, 0.6866, 0.7135, 0.7468, 0.777 , 0.7921, 0.7903,
                            0.7764, 0.7571, 0.738 , 0.7206, 0.7069, 0.6965, 0.6903, 0.6889,
                            0.6925, 0.7025, 0.7197, 0.7457, 0.7829, 0.8332, 0.8981, 0.9756,
                            1.0582, 1.132 , 1.1831, 1.2052, 1.2027, 1.1851, 1.1619, 1.1398,
                            1.1224, 1.1124, 1.11  , 1.1157, 1.1288, 1.149 , 1.1754, 1.2072,
                            1.2427, 1.2857, 1.371 , 1.4624, 1.4746, 1.4658, 1.459 , 1.433 ,
                            1.3774, 1.2876, 1.1748, 1.1058, 1.1449, 1.2192, 1.1883, 1.1505,
                            1.304 , 1.5367, 1.2882, 0.8675, 0.6273, 0.5124, 0.4643, 0.4611,
                            0.5013, 0.5979, 0.787 , 1.1594, 1.9756, 4.2255])



        self.n_imag = np.array([0.1182,  0.12  ,  0.1213,  0.1225,  0.1238,  0.1251,  0.127 ,
                            0.1283,  0.1297,  0.1311,  0.1325,  0.1344,  0.1359,  0.138 ,
                            0.1396,  0.1417,  0.1446,  0.1469,  0.1498,  0.1534,  0.1571,
                            0.162 ,  0.1671,  0.1729,  0.1805,  0.1889,  0.199 ,  0.2115,
                            0.2255,  0.2416,  0.2589,  0.276 ,  0.2896,  0.2975,  0.2968,
                            0.2884,  0.2743,  0.2592,  0.246 ,  0.2396,  0.2482,  0.3298,
                            0.3787,  0.2057,  0.184 ,  0.1781,  0.1763,  0.1763,  0.177 ,
                            0.1786,  0.1806,  0.1837,  0.1867,  0.191 ,  0.1952,  0.2005,
                            0.2061,  0.2128,  0.2201,  0.228 ,  0.2362,  0.2449,  0.2529,
                            0.2601,  0.2659,  0.2704,  0.2749,  0.28  ,  0.2858,  0.2933,
                            0.3018,  0.3124,  0.3247,  0.3387,  0.3544,  0.373 ,  0.3933,
                            0.4168,  0.4432,  0.4735,  0.5068,  0.5428,  0.5782,  0.6075,
                            0.6227,  0.621 ,  0.6078,  0.5947,  0.5906,  0.5977,  0.6145,
                            0.639 ,  0.6698,  0.7057,  0.746 ,  0.7903,  0.8382,  0.8897,
                            0.9434,  0.999 ,  1.055 ,  1.1078,  1.1518,  1.1793,  1.1827,
                            1.1586,  1.1153,  1.0675,  1.0293,  1.0087,  1.0065,  1.0208,
                            1.0478,  1.0842,  1.1275,  1.1751,  1.2252,  1.2764,  1.328 ,
                            1.3792,  1.4315,  1.4953,  1.5237,  1.5785,  1.5004,  1.522 ,
                            1.5459,  1.5768,  1.6288,  1.7257,  1.9066,  2.2174,  2.3998,
                            2.5123,  2.6012,  2.8379,  3.1046,  3.0624,  2.908 ,  3.2129,
                            3.7605,  4.3965,  5.121 ,  5.9757,  7.0273,  8.3824, 10.2266,
                            12.9215, 17.2802, 25.5617])

        self.n_cplx = self.n_real + 1.0j*self.n_imag

        self.interpolate_order = interpolate_order
        if self.interpolate_order > 1:
            self.f = _interp1dPicklable(self.wl, self.n_cplx, kind=self.interpolate_order)


    def epsilon(self, wavelength):
        """Silver dielectric function
        
        Parameters
        ----------
        wavelength: real
            wavelength at which to evaluate dielectric function (in nm)
        
        """
        if self.interpolate_order == 1:
            n_r = np.interp(wavelength, self.wl, self.n_real)
            n_i = np.interp(wavelength, self.wl, self.n_imag)
            eps = (n_r + 1j*n_i)**2
        else:
            eps = self.f(wavelength)**2
        return eps


## -- list of all available material classes
MAT_LIST = [Ag, Au, Cu, Ni, Pd, Pt]
            ##  ##  ##