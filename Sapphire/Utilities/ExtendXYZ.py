from ase.io import read
import numpy as np
import pickle


class Extend():
    """This."""

    def __init__(self, Traj, System, Metadata, Names, Outfile='Extended.xyz'):
        """
        Parameters.

        ----------
        
        Traj : ase atoms object
            This will be typically read into the class directly from the
            Process object. However, a user may also call seperately and in
            this case must pre-call the ase atoms object before this class.
            
        System : python dictionary
            Dictionary of basic analysis parameters provided by both the
            user and the System_Clean module.
            
        Metadata : python dictionary
            This is the dictionary style outpute of Sapphire which contains
            all of the relevant analysed information for facile reading/writing.
            
        Names : list of strings
            The names of the quantities to be hunted for in the metadata.
            These will need to be given precisely as they are named in the
            documentation. Two additional names may also be provided.
            
            E1NN : How many nearest neighbours each atom has which are atomic
            type 1. At present, this is crudely implemented.
            
            E2NN : How many nearest neighbours each atom has which are atomic
            type 2. At present, this is crudely implemented.

        Returns
        -------
        None.
        But it will write the extended xyz file or die trying.

        """
        self.System = System
        self.Base = self.System['base_dir']
        self.Metadata = Metadata
        self.Names = Names
        self.Quants = []
        self.Traj = Traj
        self.Outfile = Outfile
        for name in self.Names:
            try:
                self.Quants.append(self.Metadata[name])
            except Exception as e:
                self.Names.pop(name)
                with open(self.Base + 'Sapphire_Errors.log', 'a') as f:
                    f.write("Sapphire is cowardly unwilling to write %s into the extended xyz file with error traceback:\n %s\n" % (name, e))
        self.ExtendXYZ()

    def ExtendXYZ(self):
        """

        Parameters.

        ----------

        Returns
        -------
        None.

        """
        with open(self.Base + self.Outfile, 'w') as movie:
            movie.write(str(self.Metadata['NAtoms'][0]) + '\n')
            movie.write('Extended xyz file generated by Sapphire | \t:')
            movie.write('Extra columns are | \t')
            for name in self.Names:
                movie.write(str(name) + '\t')
            movie.write('\n')
            for i, Frame in enumerate(range(len(self.Metadata['NAtoms']))):
                items = np.column_stack((self.Traj[i].get_chemical_symbols(),
                                         self.Traj[i].positions))
                for obj in self.Quants:
                    try:
                        items = np.column_stack((items, obj[i]))
                    except Exception as e:
                        with open(self.Base + 'Sapphire_Errors.log', 'a') as f:
                            f.write("Sapphire is cowardly unwilling to write %s into the extended xyz file with error traceback:\n%s\n" % (obj, e))
                for atom in items:
                    movie.write(' \t'.join(str(item) for item in atom) + '\n')
                movie.write(str(self.Metadata['NAtoms'][i]) + '\n')
                movie.write('\n')